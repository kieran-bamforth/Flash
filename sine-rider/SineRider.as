package {	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.text.TextField;	import flash.text.TextFormat;	public class SineRider extends Sprite	{		// The "pen" is a little triangle that "draws" the pattern.		private var pen:Sprite = new Sprite();		// The pen line drawn by the pen when it moves. 		private var pen_line:Sprite = new Sprite();		// degrees regulates the pen's angle.		private var degrees:int = 0;		/* degrees_step regulates how much the pen's angle increases per frame;		i.e. how fast the pen alternates between going up (positive) and then back down (negative). */		private var degrees_step:int = 200;		// magnitude is the distance that the pen travels per frame. 		private var magnitude:int = 10;		// erratic is how much the pen "spins" per frame.		private var erratic:int = 10;		public function SineRider()		{			// Draw the pen & add it to the stage.			with (pen.graphics)			{				lineStyle(1, 0xFFFFFF);				moveTo(pen.x-5, pen.y-5);				lineTo(pen.x+5 ,pen.y+0);				lineTo(pen.x-5, pen.y+5);				lineTo(pen.x-5, pen.y-5);			}			// Set the pen line's style.			pen_line.graphics.lineStyle(1, 0xFFFFFF);			// Set their positions + add to the stage.			pen.y = stage.stageHeight / 2;			pen_line.graphics.moveTo(0, pen.y);			trace(stage.stageHeight);			this.addChild(pen);			this.addChild(pen_line);			// Create the styles for the upcoming textfields + labels.			var textfieldFormat:TextFormat = new TextFormat(); 			var textfieldLabelFormat:TextFormat = new TextFormat();			textfieldLabelFormat.color = 0xFFFFFF;			textfieldLabelFormat.align = flash.text.TextFormatAlign.RIGHT;						textfieldFormat.font = textfieldLabelFormat.font = "Ariel";						// Create the textfields + labels that will manipulate the pen.			var fields:Array = new Array("degrees_step", "magnitude", "erratic");			for(var field in fields)			{				var textfield:TextField = new TextField();					textfield.type = flash.text.TextFieldType.INPUT;				textfield.name = fields[field];				textfield.height = 20;				textfield.width = 50;				textfield.x = stage.stageWidth-70;				textfield.y = (stage.stageHeight - 40) - (field*30);				textfield.background = true;				textfield.backgroundColor = 0xFFFFFF;				textfield.text = "";				textfield.setTextFormat(textfieldFormat);				textfield.addEventListener(KeyboardEvent.KEY_UP, manipulatePen);								var textfieldLabel:TextField = new TextField();					textfieldLabel.x = stage.stageWidth-180;				textfieldLabel.y = (stage.stageHeight - 40) - (field*30);				textfieldLabel.autoSize = flash.text.TextFieldAutoSize.RIGHT;				textfieldLabel.text = fields[field];				textfieldLabel.setTextFormat(textfieldLabelFormat);								this.addChild(textfield);				this.addChild(textfieldLabel);			}						// Execute the ride() function @ 24fps. 			this.addEventListener(Event.ENTER_FRAME, ride);						// Respond when a key is pressed.			stage.addEventListener(flash.events.KeyboardEvent.KEY_UP, respondToKey);		}		private function manipulatePen(e:KeyboardEvent)		{			// Cast the target into a textfield, then attempt to convert it's text into an integer.			var newVal:int = parseInt((TextField)(e.target).text);			trace(newVal);						// Cast the target into a textfield, then use it's name to update the corresponding variable.			switch((TextField)(e.target).name)			{				case "degrees_step":					degrees_step = newVal;					break;				case "magnitude":					magnitude = newVal;					break;				case "erratic":					erratic = newVal;					break;				default:					trace("unknown text field!");					break;			};		}		private function ride(e:Event)		{			// Set the rotation (and therefore, direction) of the pen.			// Math.sin() takes radians as a parameter, so radians = degrees * PI / 180.			pen.rotation = Math.sin(degrees * Math.PI / 180) * erratic;			/* Calculate the pen's vector; that is how far the pen moves (magnitude) in a certain direction.			vx = ratio between adjacent leg and hypotenuse leg. (Cosine = Adjacent / Hypotenuse).			vy = ratio between opposite leg and hypotenuse leg (Sine = Opposite / Hypotenuse).						Remember that Math.cos & Math.sin take radians as the parameter, so degrees * 180 / PI = radians. */			var vx:int = Math.cos(pen.rotation * 180 / Math.PI) * magnitude;			var vy:int = Math.sin(pen.rotation * 180 / Math.PI) * magnitude;			// Apply the vector to the pen to make it move.			pen.x +=  vx;			pen.y +=  vy;			// Draw the line.			pen_line.graphics.lineTo(pen.x, pen.y);			// Increase the rotation of the pen for the next frame.;			degrees +=  degrees_step;			// Keep the pen on the screen.			if (pen.x > stage.stageWidth)				pen.x = 0;			if (pen.x < 0)				pen.x = stage.stageWidth;			if (pen.y > stage.stageHeight)				pen.y = 0;			if (pen.y < 0)				pen.y = stage.stageHeight;			pen_line.graphics.moveTo(pen.x, pen.y);						// Every vector path has a random width & colour.			pen_line.graphics.lineStyle( 1+(Math.random()*2), (Math.random()*0xFFFFFF) );		}		private function respondToKey(e:KeyboardEvent)		{			// If 'C' was pressed, clear the pen_line.			if(e.keyCode == 67)				pen_line.graphics.clear();		}	}}